
Display is a 512x392 virtual FrameBuffer.  
The visible region is a window(480x360 or 240x180) into FrameBuffer

Mode 0: is a mode using 3x3 pixel cells. Each cell is represented by a single
	byte of pixel data and a single byte colour data.
	each cell may use two of 16 colours.
        
Mode 1: is a tiled mode using 8x8 pixel cells, each cell using one of 16 four-color palettes.
	each cell is two bytes, one byte for tile index, 4 bits for Palette selection,
	a bit each for tile flipX and FlipY


Adresses listed as +nn are offset of the previously specified register block.
eg.   blit_ImageBytesWide + 02  is port 0x4a ( blit_port_start + 02)
  

Display_port_start = 0x40 ; display ports are write only.  
 
FrameBuffer_Control  +00   Generate Display  
	Write Value
	0x00 = Show Lowres display  (240x160)
	0x01 = Show Highres display (480x360);
	0x71 = blit 8 pixels per byte
	0x72 = blit 4 pixels per byte
	0x73 = blit 3 pixels per byte
	0x74 = blit 2 pixels per byte
	0x80 = Generate Mode 0   (fill framebuffer with 1.777bit per pixel data ( 16 bits per 9 pixels) )
	0x81 = Generate Mode 1   (fill framebuffer with tile map )
			
 
 displayShift  +01  default 0    framebuffer view offset  xxxxyyyy 
	
 serialPixelAddress_L +02
 serialPixelAddress_M +03
 serialPixelAddress_H,+04    virtual frameBuffer serial pixel write address.  0x000000-0x031000 
 
 serialPixelSet,+05   frameBuffer set         pixel=palette[v],   serialPixelAddress+=1
 serialPixelMul,+06   frameBuffer multiply    pixel.rgb=(pixel.rgb*palette[v].rgb) >> 8  (does not advance address)
 serialPixelAdd,+07   frameBuffer add         pixel.rgb+=palette[v].rgb,  serialPixelAddress+=1 (clamped add)
 

Mode_port_start = Display_port_start + 0x08

 mode0_PixelData_displayStart_L  +00
 mode0_PixelData_displayStart_H  +01  default 0x4000;
 mode0_ColorData_displayStart_L  +02  
 mode0_ColorData_displayStart_H  +03  default 0x4001;

 mode0_PixelData_increment +04 default 2;
 mode0_ColorData_increment +05 default 2;
  	
 mode0_PixelData_lineIncrement +06 default 64    pixel data bytes per line vvvvvvvv000  (v<<3)
 mode0_ColorData_lineIncrement +07 default 64    pixel data bytes per line vvvvvvvv000  (v<<3)
	

 mode1_tile_image_start_L +00;
 mode1_tile_image_start_H +01;   tile data is 256 * 8x8 *2bit =   4096 bytes
 mode1_map_Data_start_L +02;
 mode1_map_Data_start_H +03;	tile map entries are 2 bytes per tile  
 mode1_Map_Data_lineIncrement+04;   map data bytes per line vvvvvvvv000  (v<<3)
 mode1_palettes_start_L +05;     Palettes are 16 * 4 * 4bit entries = 32 bytes
 mode1_palettes_start_H +06; 
 mode1_shift +07;   xxxxyyyy
 
 
 
blit_port_start = Display_port_start + 0x08   ;  this is the same port space as the mode ports 
 blit_ImageData_L +00
 blit_ImageData_H +01
 blit_ImageBytesWide + 02
 blit_ImageHeight +3
 blit_ImageData_LineIncrement +04
 blit_PaletteData_L +5
 blit_PaletteData_H +6
 blit_Flags +7           FlipX, FlipY, DoubleX, DoubleY   4 bits reserved 
 
   
 
 input base = 0x48  ; the read only inputs share addresses with the display output ports. 
 button_state_0 + 0  Left Up Right Down Enter Esc Ctrl Shift  
 button_state_1 + 1  A W D S SPACE (Mouse1/Z) (Mouse2/X (Mouse3/BackSpace)
 mouseX +2
 mouseY +3
 ticker +4   increments on each frame of host device.
 timer  +5   increments once per second 
 console + 6  buffers a few chars. reads as zero when buffer is empty. reading the port removes the item from the buffer.
 
 
 Audio Base = 0x80
 Master_volume = +00

 voice_Select = +07   select voice 0..7 The following 8 registers map to that voice.    
 
 voice_Freq_L	= +08
 voice_Freq_H	= +09			frequency is IntValue * 0.0596  
 voice_Volume   = +0A
 voice_WaveShape = +0B   Low 4 bits Wave Base,  0000 square, 1000 = Sine, 1111 = Triangle.
 		intermediate values interpolate.
		square and trianlge are scaled to have same area under curve as Sine

 		High 4 Bits Wave shift. 1000 no shift, Applies a gamma curve in the time domain

 voice_BendWave = +0C		low 5 Bits Bend Duration	 ((intValue+1)/33)² * 30 Hz 
 		high 3 bits Bend phase 0000=0 1000=Pi,   

 voice_BendAmplitude = +0D 
 		Frequency shift of bend.  This scales the bendwave.
 		value of 255 will occilate between 
		voice_freq - voice_freq/2
		  and 
		 voice_freq + voice_freq/2
 
 voice_NoiseHold = +0E low 4 bits Noise level,  High 4 bits HoldTime
		Release starts at (intValue / 8)² Seconds
		0000 is Immediate release
		0001 is release after 1/64th of a second
		1000 is release after 1 second
		1111 is release after 3.51625 seconds
 
 voice_AttackRelease = +0F  low 4 bits of attack, high 4 bits release. 
		Duration for both is (intValue / 8)² Seconds
		writing to the AttackRelease Register triggers the start of the
		Attack,Hold,Release Cycle.



